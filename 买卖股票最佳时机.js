/**
 * 
 *  买卖股票最佳时机 【1】： 可以随时买入卖出
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。

 */
// 贪心算法 只跟下一个价格对比 如果是上涨继续，如果是下降卖出
var maxProfit = function(prices) {
    let price = 0
    for(let i= 0; i < prices.length-1; i++){
            price += Math.max(0, prices[i+1] - prices[i])
    }
    return price
};



/**
 * 
  买卖股票最佳时机【2】： 只可以买入卖出一次，求最大的收益  利润为买入卖出节点(只是两个日期)的股票值差价

  给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。


示例 1：

输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票
 */
var maxProfit = function(prices) {
    // 添加末端的哨兵节点 即最小值
   let money = 0 //利润
   let minPrice = prices[0]

   for(let i = 1; i<prices.length;i++){
        minPrice = Math.min(prices[i], minPrice)
        money = Math.max(money, prices[i]-minPrice) // 最大的利润是两个时间节点的股票值差价 和其他时间节点无关
   }    
   return money
};